package se.skoview.view

import pl.treksoft.kvision.core.*
import pl.treksoft.kvision.form.InputSize
import pl.treksoft.kvision.form.select.selectInput
import pl.treksoft.kvision.html.Align
import pl.treksoft.kvision.html.Div
import pl.treksoft.kvision.html.div
import pl.treksoft.kvision.html.h2
import pl.treksoft.kvision.panel.SimplePanel
import pl.treksoft.kvision.panel.vPanel
import pl.treksoft.kvision.state.stateBinding
import pl.treksoft.kvision.table.TableType
import pl.treksoft.kvision.table.cell
import pl.treksoft.kvision.table.row
import pl.treksoft.kvision.table.table
import pl.treksoft.kvision.tabulator.*
import pl.treksoft.kvision.utils.perc
import pl.treksoft.kvision.utils.px
import se.skoview.data.*

data class ViewInformation(
    val baseItem: BaseItem,
    val showData: String,
    val type: ItemType
)

object hippoPage : SimplePanel() {

    init {

        println("In hippoPage")

        vPanel {
            div {
                h2("RHippo - integrationer via tjänsteplattform/ar för nationell e-hälsa")
                div("Integrationer för tjänsteplattformar vars tjänstadresseringskatalog (TAK) är tillgänglig i Ineras TAK-api visas.").apply {
                    width = 100.perc
                }
            }.apply {
                width = 100.perc
                background = Background(0x113d3d)
                align = Align.CENTER
                color = Color(Col.WHITE)
                marginTop = 5.px
            }
        }
        vPanel {
        }.apply {
            width = 100.perc
            clear = Clear.BOTH
            margin = 0.px
            background = Background(0xf6efe9)
        }.stateBinding(store) { state ->
            div(classes = setOf(""""class="cssload-loader""""))
            div {
                //add(DateSelectPanel(state.updateDates, state.dateEffective.toSwedishDate()))
                val dateOptionList = state.updateDates.map { Pair(it, it) }
                selectInput(
                    options = dateOptionList,
                    value = state.dateEffective
                )
                    .apply {
                        selectWidth = CssSize(150, UNIT.px)
                        size = InputSize.SMALL
                    }
                    .onEvent {
                        change = {
                            println("Date selected:")
                            console.log(self.value)
                            store.dispatch(HippoAction.DateSelected(self.value ?: ""))
                            store.dispatch { dispatch, getState ->
                                dispatch(HippoAction.DateSelected(self.value ?: ""))
                                loadIntegrations(getState())
                            }
                        }
                    }
            }
        }
        vPanel {
        }.apply {
            //background = Background(0x009090)
            width = 100.perc
        }.stateBinding(store) { state ->
            if (state.showIntegrations) {
                println("- - - - View invoked - - - ")

                val integrationLists = createViewData(state)

                //println("========================> Actions submitter: ${state::class.simpleName}")
                val consumerHeading: String =
                    "Tjänstekonsumenter (${integrationLists.serviceConsumers.size}/${state.maxCounters.consumers})"
                val contractHeading: String =
                    "Tjänstekontrakt (${integrationLists.serviceContracts.size}/${state.maxCounters.contracts})"
                val plattformHeading: String =
                    "Tjänsteplattformar (${integrationLists.plattformChains.size}/${state.maxCounters.plattformChains})"
                val logicalAddressHeading: String =
                    "Logiska adresser (${integrationLists.logicalAddresses.size}/${state.maxCounters.logicalAddress})"
                val producerHeading: String =
                    "Tjänsteproducenter (${integrationLists.serviceProducers.size}/${state.maxCounters.producers})"

                val viewConsumerLst: MutableList<ViewTableInformation> = mutableListOf()
                integrationLists.serviceConsumers.map {
                    viewConsumerLst.add(
                        ViewTableInformation(
                            it,
                            "<i>${it.description}</i><br>${it.hsaId}",
                            ItemType.CONSUMER
                        )
                    )
                }

                val viewContractLst: MutableList<ViewTableInformation> = mutableListOf()
                integrationLists.domainsAndContracts.map {
                    if (it::class.simpleName == "ServiceDomain") {
                        val desc = "<b>${it.description}</b>"
                        viewContractLst.add(ViewTableInformation(it, desc, ItemType.DOMAIN))
                    } else {
                        val desc = it.description
                        viewContractLst.add(ViewTableInformation(it, desc, ItemType.CONTRACT))
                    }
                }

                val viewPlattformList: MutableList<ViewTableInformation> = mutableListOf()
                integrationLists.plattformChains.map {
                    viewPlattformList.add(
                        ViewTableInformation(
                            it,
                            it.name,
                            ItemType.PLATTFORM_CHAIN
                        )
                    )
                }

                val viewLogicalAddressList: MutableList<ViewTableInformation> = mutableListOf()
                integrationLists.logicalAddresses.map {
                    viewLogicalAddressList.add(
                        ViewTableInformation(
                            it,
                            "<i>${it.description}</i><br>${it.name}",
                            ItemType.LOGICAL_ADDRESS
                        )
                    )
                }

                val viewProducerLst: MutableList<ViewTableInformation> = mutableListOf()
                integrationLists.serviceProducers.map {
                    viewProducerLst.add(
                        ViewTableInformation(
                            it,
                            "<i>${it.description}</i><br>${it.hsaId}",
                            ItemType.PRODUCER
                        )
                    )
                }

                add(
                    //HippoTabulatorPage(
                    HippoTablePage(
                        consumerHeading,
                        contractHeading,
                        plattformHeading,
                        logicalAddressHeading,
                        producerHeading,
                        viewConsumerLst,
                        viewContractLst,
                        viewPlattformList,
                        viewLogicalAddressList,
                        viewProducerLst
                    )
                )
            }
        }
    }
}

class HippoTabulatorPage(
    val consumerHeading: String,
    val contractHeading: String,
    val plattformHeading: String,
    val logicalAddressHeading: String,
    val producerHeading: String,
    val viewConsumerLst: MutableList<ViewTableInformation>,
    val viewContractLst: MutableList<ViewTableInformation>,
    val viewPlattformList: MutableList<ViewTableInformation>,
    val viewLogicalAddressList: MutableList<ViewTableInformation>,
    val viewProducerLst: MutableList<ViewTableInformation>
): SimplePanel() {
    init {
        table(
            listOf(
                "",
                "",
                "",
                "",
                ""
            ),
            setOf(TableType.SMALL, TableType.BORDERED),
            classes = setOf("table-layout:fixed")
        )
        {
            row(classes = setOf("table-layout:fixed")) {
                // Service consumers
                cell(classes = setOf("table-layout:fixed")) {
                    add(HippoTabulator(consumerHeading, viewConsumerLst))
                }.apply {
                    width = 20.perc
                }
                // Service contracts
                cell {
                    add(HippoTabulator(contractHeading, viewContractLst))
                }.apply {
                    width = 20.perc
                }
                // Plattforms
                cell {
                    add(HippoTabulator(plattformHeading, viewPlattformList))
                }.apply {
                    width = 15.perc
                }
                // Logical addresses
                cell {
                    add(HippoTabulator(logicalAddressHeading, viewLogicalAddressList))
                }.apply {
                    width = 20.perc
                }
                // Service producers
                cell {
                    add(HippoTabulator(producerHeading, viewProducerLst))
                }.apply {
                    width = 20.perc
                }
            }.apply {
                color = Color(Col.BLACK)
                width = 100.perc
            }
        }.apply {
            color = Color(0x009090)
            width = 100.perc
        }
    }
}

class HippoTabulator(
    columnHeader: String,
    itemList: List<ViewTableInformation>
) : SimplePanel() {
    init {
        tabulator(
            itemList,
            options = TabulatorOptions(
                columns = listOf(
                    ColumnDefinition(
                        columnHeader, "showData",

                        formatterComponentFunction = { _, _, item ->
                            //console.log("In ColumnDef: ${item.name}")
                            Div(rich = true) {
                                if (store.getState().isItemFiltered(item.type, item.baseItem.id)) {
                                    background = Background(Col.LIGHTSTEELBLUE)
                                }
                                +item.showData
                            }
                            //Div() { +item.hsaId }
                        },
                        headerFilter = Editor.INPUT
                    )
                ),
                layout = Layout.FITCOLUMNS,
                layoutColumnsOnNewData = false,
                pagination = PaginationMode.LOCAL,
                height = "80vh",
                paginationSize = 100,
                selectable = true,
                rowSelected = { row ->
                    console.log(row)
                    val viewItem = row.getData() as ViewTableInformation
                    val viewType = viewItem.type
                    val baseItem = viewItem.baseItem
                    store.dispatch { dispatch, getState ->
                        store.dispatch(HippoAction.ItemSelected(viewType, baseItem))
                        println("Time to download the integrations since an item has been selected/deselected")
                        console.log(getState())
                        loadIntegrations(getState())
                    }
                    println("Item clicked: $viewType")
                    console.log(baseItem)
                }
            )
        )
        {
            //height = 430.px
            width = 90.perc
        }
    }
}